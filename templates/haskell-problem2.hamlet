<div .problem>
  <h4>Problem 2 "Even Fibonacci Numbers"
  <blockquote>
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    <br>
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    <br>
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


  <h5>Break it down
  <p>
    The biggest sections we can break this off into are the Fibonacci sequence, and the sum of even-valued terms.

  <h5>Fibonacci Sequence
  <p>
    The Fibonacci Sequence is defined in mathematicall terms as: 
    F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub> with the seed values: 
    F<sub>1</sub> = 1 and F<sub>2</sub> = 1.
    We can translate this perfectly into Haskell by writting:
    <pre>
      ghci&gt; let f n = if n == 1 || n == 2 then 1 else f (n-1) + f (n-2)
    Try it out
  <div .panel.panel-primary>
    <div .panel-heading>Examples
    <ul .list-group>
      <li .list-group-item>
        <pre>
          gchi&gt; f 1
          1
      <li .list-group-item>
        <pre>
          gchi&gt; f 5
          5
      <li .list-group-item>
        <pre>
          gchi&gt; f 10
          55
      <li .list-group-item>
        <pre>
          ghci&gt; f 50
          12586269025
      <li .list-group-item .list-group-item-warning>
        For the last example it probably took a really long time to run. 
        This is because the version we just made uses too many redundant calculations.
        If we are going to be creating Fibonacci numbers up to 4 million we will 
        have to come up with a faster function.
  <p>
    Lets make it faster.  
    The next definition for Fibonacci is a little confusing so bear with me.
    <pre>
      ghci&gt; let fibs = 0 : 1 : zipWith (+) fibs (tail fibs)
    This creates an infinite list of all the Fibonacci numbers.
    So if we want to access an individual element in the Fibonacci sequence we would write <code>fibs !! 50</code>
    to get the 50<sup>th</sup> element. 
    Note that the definition of <code>fibs</code> references <code>fibs</code> in its own definition.
    This means that it uses the previously generated elements of the list to create the rest of the list.
    Try this one out with extremely large values.
  <div .panel.panel-primary>
    <div .panel-heading>Examples
    <ul .list-group>
      <li .list-group-item>
        <pre>
          gchi&gt; fibs !! 1
          1
      <li .list-group-item>
        <pre>
          gchi&gt; fibs !! 5
          5
      <li .list-group-item>
        <pre>
          gchi&gt; fibs !! 10
          55
      <li .list-group-item>
        <pre>
          ghci&gt; f 50
          12586269025
      <li .list-group-item .list-group-item-warning>
        Notice how much quicker this one was because there were no redundent calculations.
  <p>
    Now to put it together.
    You already have a list of all the elements of Fibonacci, now you just have to find the even ones less than 4 million.
    For that you can use filter and takeWhile. 
    <pre>
      ghci&gt; let evenFibs = takeWhile (&lt;4000000) (filter even fibs)
    Now sum them.
    <pre>
      ghci&gt; sum evenFibs
    There you go!
    Problem 2 in the bag!
    Now onto problem 3.
  