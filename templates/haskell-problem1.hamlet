<div .problem>
  <h3>Starting Project Euler
  <h4>Problem 1 "Multiples of 3 and 5"
  <blockquote>
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    <br>
    Find the sum of all the multiples of 3 or 5 below 1000.
  <p>
    The way to approach all programming problems is to break a large problem 
    into smaller ones.
    If the smaller pieces are still too big, break them down further.  
    You do this until you have a bunch of tiny managable pieces that you just have to fit together.
  <p>
    Each of these small pieces is represented using different functions.
  <h4>Breaking it down
  <p>
    This problem has a few distinct pieces that need to be addressed.
    <ul>
      <li>
        "Multiples of 3 or 5" finding if a number is a multiple of 3 or 5
      <li>
        "all the multiples of 3 and 5 below 1000" indicates we need a list to store multiples of 3 and 5.
      <li>
        "sum" find the sum of that list.
  <h4>Multiple of 3 or 5
  <p>
    For this piece you will make a function to detirmine if a number is a multiple of 3 or 5.
  <p>
    We can break this up even further into two functions, one that tests if a 
    number is divisible by 3 and another that tests if its divisble by 5.
    After that we will combine them.
    Start with the name and arguments of the function.
    Name it something memorable and clear like <code>isMultipleOf3</code>.
    This function will take 1 argument we will call it <code>n</code> and it will be the number we are testing.
  <p>
    So far you should have part of a function definition like so:
    <pre>
      ghci&gt; let isMultipleOf3 n = 
  <p>
    Now to find if a number is a multiple of 3 you need to use the <code>mod</code> function.
    The <code>mod</code> function takes the remainder of one number divided by another.
    So if the <code>(mod n 3)</code> is equal to 0, then we know <code>n</code> is divisible by 3.
    Lets plug it in:
    <pre>  
      ghci&gt; let isMultipleOf3 n = (mod n 3) == 0
  <p>
    Done!
    Now test it.
  <div .panel.panel-primary>
    <div .panel-heading>Examples
    <ul .list-group>
      <li .list-group-item>
        <pre>
          gchi&gt; isMultipleOf3 3
          True
      <li .list-group-item>
        <pre>
          gchi&gt; isMultipleOf3 5
          False
      <li .list-group-item>
        <pre>
          gchi&gt; isMultipleOf3 849372648
          True
  <p>
    Now for multiples of 5.
    This one should be very simple just change the 3s in the previous example to 5s.
    <pre>
      ghci&gt; isMultipleOf5 n = (mod n 5) == 0
    See, simple!
  <p>
    Now to put them together!
    Note how we word what we want because it will be very similar to how we write our next function.
    We want to check if the number "is a multiple of 3 or is a multiple of 5".
    <pre>
      ghci&gt; isMultipleOf3or5 n = (isMultipleOf3 n) || (isMultipleOf5 n)
    For our function "is a multiple of 3" translates into <code>isMultipleOf3 n</code>, 
    "or" translates into the function <code>||</code>, and "is a multiple of 5" translates into <code>isMultipleOf5 n</code>.
    Now test it.
  <div .panel.panel-primary>
    <div .panel-heading>Examples
    <ul .list-group>
      <li .list-group-item>
        <pre>
          gchi&gt; isMultipleOf3or5 3
          True
      <li .list-group-item>
        <pre>
          gchi&gt; isMultipleOf3or5 5
          True
      <li .list-group-item>
        <pre>
          gchi&gt; isMultipleOf3or5 849372648
          True
      <li .list-group-item>
        <pre>
          ghci&gt; isMultipleOf3or5 9875378325
          True
  <p>
    Now to make a list of all these numbers.
    This is where our friend <code>filter</code> comes in.
    To filter the list so that it only includes multiples of 3 and 5 we give the 
    filter function our isMultipleOf3or5 function.
    <pre>
      ghci&gt; let multiples = filter isMultipleOf3or5 [1..999]
      gchi&gt; multiples
      [3,5,6,9,10,12,15,18,20,21,24,25,27,30,33,35,36,39,40,42,45,48,50,51,54,55,57,60,63,65,66,69,70,72,75,78,80,81,84,85,87,90,93,95,96,99,100,102,105,108,110,111,114,115,117,120,123,125,126,129,130,132,135,138,140,141,144,145,...
    Woo! It works! We have a list of all multiples of 3 and 5.  
    Now we sum them up with the <code>sum</code> function.
    <pre>
      gchi&gt; sum multiples
      233168